package olm_test

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	gb "github.com/onsi/gomega/gbytes"
	ge "github.com/onsi/gomega/gexec"
	"io"
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/util/yaml"
	"os/exec"
	"strings"
	"time"
)

// TODO(zerpet): add fixture tests, to validate that YAML manifests generated by ytt are what we expect

var _ = Describe("Deploy", func() {
	const (
		kubectl          = "kubectl"
		ns               = "ns-1"
		ten              = time.Second * 10
		gtContainerImage = `go-template='{{ with $x := index .spec.template.spec.containers 0 }}{{ $x.image }}{{ end }}'`
	)

	waitForSubscription := func() {
		Eventually(func() (io.Writer, error) {
			c := exec.Command(
				"kubectl",
				"-n",
				"ns-1",
				"get",
				"subscription",
				"sub-to-rabbitmq-cluster-operator",
				"--output",
				"go-template='{{ .status.state }}'",
			)
			b := gb.NewBuffer()
			s, err := ge.Start(c, b, b)
			if err != nil {
				return nil, err
			}
			// danger: use timeout
			<-s.Exited
			return b, nil
		}).
			WithTimeout(time.Minute * 3).
			WithPolling(ten).
			Should(gb.Say("AtLatestKnown"))
	}

	It("works", func() {
		// setup
		waitForSubscription()
		SetDefaultEventuallyTimeout(ten)
		SetDefaultEventuallyPollingInterval(time.Second)

		By("having the cluster operator image")
		c := exec.Command(kubectl, "-n", ns, "get", "deployment", "rabbitmq-cluster-operator", "-o", "yaml")
		stdout := gb.NewBuffer()
		session, err := ge.Start(c, stdout, stdout)
		Expect(err).ToNot(HaveOccurred())
		Eventually(session).Should(ge.Exit(0))

		deploy := new(appsv1.Deployment)
		Î©(yaml.Unmarshal(stdout.Contents(), deploy)).Should(Succeed())
		Expect(deploy.Spec.Template.Spec.Containers).To(HaveLen(1))
		container := deploy.Spec.Template.Spec.Containers[0]
		Expect(container.Image).To(ContainSubstring("rabbitmqoperator/cluster-operator"))

		By("creating a rabbitmq object")
		c = exec.Command(kubectl, "-n", ns, "create", "-f-")
		c.Stdin = strings.NewReader(sampleRabbitmqCluster)
		session, err = ge.Start(c, GinkgoWriter, GinkgoWriter)
		Expect(err).ToNot(HaveOccurred())
		Eventually(session).Should(ge.Exit(0))

		By("inspecting the StatefulSet")
		time.Sleep(time.Second) // operator needs some time to create the STS
		c = exec.Command(kubectl, "-n", ns, "get", "statefulset", "sample-server", "--output", gtContainerImage)
		stdout = gb.NewBuffer()
		session, err = ge.Start(c, stdout, stdout)
		Expect(err).ToNot(HaveOccurred())
		Eventually(stdout).Should(gb.Say("rabbitmq:"))
	})
})

var sampleRabbitmqCluster = `apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: sample
spec:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 512Mi
  persistence:
    storage: 0`
